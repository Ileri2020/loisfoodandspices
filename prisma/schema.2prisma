// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      =  env("MONGODB_URL")
}

model Store {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  name       String
  userId     String
  // billboardsId String     
  // categoriesId String 
  // sizesId String 
  // colorsId String 
  // productsId String 
  // ordersId String 
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Bible {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  verse String
  page String
}

model Billboard {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String       @db.ObjectId
  label      String
  imageUrl   String
  categories String[]     // Store category IDs
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
}

model Category {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId     String
  billboardId String
  name        String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Size {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String
  name      String
  value     String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Color {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  storeId   String
  name      String
  value     String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Product {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String
  categoryId String
  name       String
  price      Float
  isFeatured Boolean     @default(false)
  isArchived Boolean     @default(false)
  sizeId     String
  colorId    String
  imagesId String 
  orderItems String[]
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model Image {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  productId String
  url       String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}

model Order {
  id         String      @id @default(auto()) @map("_id") @db.ObjectId
  storeId    String
  orderItems String[]
  isPaid     Boolean     @default(false)
  phone      String      @default("")
  address    String      @default("")
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}

model OrderItem {
  id        String       @id @default(auto()) @map("_id") @db.ObjectId
  orderId   String
  productId String
  createdAt DateTime     @default(now())
  updatedAt DateTime     @updatedAt
}




























//  $ prisma [command]

//     Commands

//                 init   Set up Prisma for your app
//             generate   Generate artifacts (e.g. Prisma Client)
//                   db   Manage your database schema and lifecycle
//              migrate   Migrate your database
//               studio   Browse your data with Prisma Studio
//             validate   Validate your Prisma schema
//               format   Format your Prisma schema
//              version   Displays Prisma version info
//                debug   Displays Prisma debug info
//                  mcp   Starts an MCP server to use with AI development tools

//     Flags

//          --preview-feature   Run Preview Prisma commands
//          --help, -h          Show additional information about a command

// ┌──────────────────────────────────────────────────────────────────────────────────────┐
// │  Optimize performance through connection pooling and caching with Prisma Accelerate  │
// │  and capture real-time events from your database with Prisma Pulse.                  │
// │  Learn more at https://pris.ly/cli/pdp                                               │
// └──────────────────────────────────────────────────────────────────────────────────────┘

//     Examples

//       Set up a new Prisma project
//       $ npx prisma init

//       Generate artifacts (e.g. Prisma Client)
//       $ prisma generate

//       Browse your data
//       $ prisma studio

//       Create migrations from your Prisma schema, apply them to the database, generate artifacts (e.g. Prisma Client)
//       $ prisma migrate dev

//       Pull the schema from an existing database, updating the Prisma schema
//       $ prisma db pull

//       Push the Prisma schema state to the database
//       $ prisma db push

//       Validate your Prisma schema
//       $ prisma validate

//       Format your Prisma schema
//       $ prisma format

//       Display Prisma version info
//       $ prisma version

//       Display Prisma debug info
//       $ prisma debug